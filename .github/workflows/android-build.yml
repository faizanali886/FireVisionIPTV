name: FireVisionIPTV - Flutter Android Build and Release

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check if pubspec.yaml exists and contains Flutter
      id: check_flutter
      run: |
        if [ -f "pubspec.yaml" ]; then
          if grep -q "flutter:" "pubspec.yaml"; then
            echo "flutter_project=true" >> $GITHUB_ENV
          else
            echo "flutter_project=false" >> $GITHUB_ENV
          fi
        else
          echo "flutter_project=false" >> $GITHUB_ENV
      shell: /usr/bin/bash --noprofile --norc -e -o pipefail

    - name: Set up Flutter
      if: env.flutter_project == 'true'
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.7.12' # Specify your required Flutter version

    - name: Install dependencies
      if: env.flutter_project == 'true'
      run: flutter pub get

    - name: Build release APK
      if: env.flutter_project == 'true'
      run: flutter build apk --release

    - name: Debug APK file path
      if: env.flutter_project == 'true'
      run: ls -R build/app/outputs/flutter-apk

    - name: Upload APK as artifact
      if: env.flutter_project == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: app-release.apk
        path: build/app/outputs/flutter-apk/app-release.apk
        
    - name: Get app version
      id: app_version
      if: env.flutter_project == 'true'
      run: |
        version=$(grep 'version: ' pubspec.yaml | head -1 | awk '{print $2}')
        echo "version=$version" >> $GITHUB_ENV
        echo "VERSION: $version"
        
    - name: Check if Release Exists
      id: check_release
      if: env.flutter_project == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.version }})
        release_id=$(echo $response | jq -r '.id')
        if [ "$release_id" == "null" ]; then
          echo "release_exists=false" >> $GITHUB_ENV
        else
          echo "release_exists=true" >> $GITHUB_ENV
          echo "release_id=$release_id" >> $GITHUB_ENV
          
    - name: Create or Update Release
      id: create_or_update_release
      if: env.flutter_project == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_EXISTS: ${{ env.release_exists }}
        RELEASE_ID: ${{ env.release_id }}
      run: |
        if [ "$RELEASE_EXISTS" == "false" ]; then
          response=$(curl -X POST -H "Authorization: Bearer $GITHUB_TOKEN" -H "Content-Type: application/json" -d "{\"tag_name\":\"v${{ env.version }}\",\"name\":\"Release v${{ env.version }}\",\"draft\":false,\"prerelease\":false}" https://api.github.com/repos/${{ github.repository }}/releases)
          release_id=$(echo $response | jq -r '.id')
          echo "release_id=$release_id" >> $GITHUB_ENV
        else
          echo "Release already exists with ID $RELEASE_ID"
          
    - name: Upload Release Asset
      if: env.flutter_project == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_ID: ${{ env.release_id }}
      run: |
        upload_url="https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=FireVisionIPTV-v${{ env.version }}.apk"
        asset_path=./build/app/outputs/flutter-apk/app-release.apk
        
        curl -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/vnd.android.package-archive" \
          --data-binary "@$asset_path" \
          "$upload_url"
